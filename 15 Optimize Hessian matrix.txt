import numpy as np
import sympy as sp
x, y = sp.symbols('x y')
f = 2*x**2 + 3*y**2 + 33*x*y + 90

double_derivative_x = sp.diff(f, x, 2)
double_derivative_y = sp.diff(f, y, 2)
double_derivative_xy = sp.diff(f, x, y)

hessian_matrix = sp.Matrix([[double_derivative_x, double_derivative_xy],
                            [double_derivative_xy, double_derivative_y]])
grad_x=sp.diff(f,x)
grad_y=sp.diff(f,y)
grad_func = sp.lambdify((x, y), [grad_x, grad_y], 'numpy')
hessian_func = sp.lambdify((x, y), hessian_matrix, 'numpy')

x_k = np.array([1.0, 1.0])
tol = 0.0000006
max_iter = 100
for i in range(max_iter):
    grad = np.array(grad_func(*x_k), dtype=float)
    H = np.array(hessian_func(*x_k), dtype=float)

    H_inv = np.linalg.inv(H)

    x_k = x_k - H_inv @ grad

    if np.linalg.norm(grad) < tol:
        break

optimal_x, optimal_y = x_k
optimal_value = f.subs({x: optimal_x, y: optimal_y})

print("Optimal x:", optimal_x)
print("Optimal y:", optimal_y)
print("Optimal Objective Value:", optimal_value)