import pandas as pd
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Flatten
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.datasets import mnist

(x_train,y_train),(x_test,y_test)=mnist.load_data()

x_train=x_train/255.0
x_test=x_test/255.0

model=Sequential([
    Flatten(input_shape=(28,28)),
    Dense(128,activation='relu'),
    Dense(10,activation='softmax')
])

model.compile(optimizer=Adam(learning_rate=0.001),loss='sparse_categorical_crossentropy',metrics=['accuracy'])

history=model.fit(x_train,y_train,epochs=10)

plt.imshow(x_test[3])

prediction=model.predict(np.expand_dims(x_test[3],axis=0))
pred=np.argmax(prediction)
print(pred)

##Regression
import numpy as np
import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt

df=sns.load_dataset('iris')
df.head()

x=df.drop(columns=['sepal_length'])
y=df['sepal_length']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

le=LabelEncoder()
x_train['sepal_length']=le.fit_transform(x_train['sepal_length'])
x_test['sepal_length']=le.transform(x_test['sepal_length'])

model=Sequential([
    Dense(64,activation='relu',input_shape=(x_train.shape[1],)),
    Dense(32,activation='relu'),
    Dense(1)
])

model.compile(optimizer=Adam(learning_rate=0.001),loss='mean_squared_error',metrics=['mae'])
history=model.fit(x_train,y_train,epochs=25)

predictions=model.predict(x_test)
for pred,actual in zip(predictions,y_test):
    print(f'Predicted Val: {pred}, actual value: {actual}')

    r2_score=r2_score(predictions,y_test)
print(r2_score)

